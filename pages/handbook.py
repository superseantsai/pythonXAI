import streamlit as st

with st.expander("Class1筆記"):
    st.write(
        '''
這是你今天學到的 Python 指令內容，我幫你用**國小六年級可以理解的方式**整理如下：

---

## 🧠 一、註解（給人看的，不是給電腦看的）

```python
# 這是單行註解
"""
這是多行註解
"""
```

👉 註解就是寫給「人」看的筆記，電腦不會執行。

---

## 📢 二、印出文字或數字

```python
print("Hello, World!")
```

👉 `print()` 會把你放進去的東西「顯示」在畫面上（終端機）。

---

## 🧩 三、基本資料型態（電腦記得資料的方式）

| 例子            | 型態名稱 | 解釋              |
| --------------- | -------- | ----------------- |
| `1`, `-5`       | `int`    | 整數              |
| `1.0`, `3.14`   | `float`  | 小數              |
| `\"apple\"`       | `str`    | 文字（字串）      |
| `True`, `False` | `bool`   | 是/不是（布林值） |

```python
print(1)
print(1.234)
print(\"apple\")
print(True)
```

---

## 📦 四、變數（幫資料取名字）

```python
a = 10
print(a)  # 顯示 10

a = "apple"
print(a)  # 顯示 apple
```

👉 把資料放進「盒子」裡，這個盒子取名叫 `a`，以後就可以用 `a` 來叫出內容。

---

## ➕ 五、運算（數學加減乘除）

```python
print(1 + 1)  # 加法
print(2 - 1)  # 減法
print(3 * 2)  # 乘法
print(4 / 2)  # 除法（會有小數）
print(5 // 2)  # 取整數商，結果是 2
print(5 % 2)  # 取餘數，結果是 1
print(2**3)  # 次方，2的3次方=8
```

**計算順序（很像數學）**

1. `()` 先算括號
2. `**` 次方
3. `* / // %`
4. `+ -`

---

## 🧵 六、字串操作（對文字做事情）

```python
print(\"apple\" + \" pen\")  # 合併變成 apple pen
print(\"apple \" * 3)  # 重複變成 apple apple apple
print(len(\"apple\"))  # 計算長度，結果是 5
```

---

## 🕵️ 七、查看型態（看資料是什麼種類）

```python
print(type(1))        # <class 'int'>
print(type(\"apple\"))  # <class 'str'>
print(type(True))     # <class 'bool'>
```

---

## 🔄 八、型態轉換（改變資料的種類）

```python
print(int(1.0))       # 把小數變整數
print(float(1))       # 把整數變小數
print(str(1))         # 把數字變成文字
print(bool(1.234))    # 變成布林值
print(float("1.234")) # 文字變小數
```

🚫 下面這行會錯誤，因為 `\"hello\"` 不是數字：

```python
# print(int(\"hello\"))
```

---

## ⌨️ 九、輸入 input（請使用者輸入東西）

```python
a = input(\"請輸入一些文字: \")
print(a)
print(type(a))  # input()輸入的都是字串
```

### ✏️ 計算輸入的數字 +10：

```python
a = input(\"請輸入數字：\")
print(int(a) + 10)
```

### ✏️ 計算圓面積：

```python
a = int(input(\"請輸入半徑：\"))
print(a * a * 3.14)
```

### ✏️ 計算國語平均成績：

```python
a = input(\"請輸入期中成績\")
b = input(\"請輸入期末成績\")
print(\"國語成績平均為\", (int(a) + int(b)) / 2)
```

---

## ✅ 小總結：今天你學會了什麼？

- 怎麼在畫面上顯示東西（print）
- 怎麼讓使用者輸入內容（input）
- 數字、文字、真假（基本資料型態）
- 算數（加減乘除、取餘數、次方）
- 怎麼命名資料（變數）
- 怎麼轉換資料的型態（int、str、float、bool）
- 怎麼對文字做加法、乘法
- 怎麼計算平均、圓面積...

---

如果你需要我幫你做成筆記（圖文版、表格版、PDF）也可以跟我說！

    '''
    )

with st.expander("Class2筆記"):
    st.write(
        """
當然可以！我們一起用**小學六年級可以理解的方式**，來看看今天你學到的「**字串格式化（f-string）**」是什麼意思吧！

---

### 🧠 你要知道什麼是「字串」？

在 Python 裡，**字串**就是**一段文字**，像這樣：

```python
"Hello"
"我是小明"
"Python好好玩"
```

---

### ✨ 什麼是「字串格式化」？

有時候我們想在一段文字裡面，**放進去變數的內容**（像名字、年齡、分數...），就可以用「**f-string**」的方式，這樣會更方便、好看又簡單！

---

### ✅ f-string 怎麼用？

我們先來看這段程式碼：

```python
name = "小明"
age = 18
print(f"hello, my name is {name}, I am {age} years old")
```

#### 🔍 我們一步步拆開看：

1. `name = "小明"`
   　👉 把「小明」這個名字存進一個叫做 `name` 的變數裡。

2. `age = 18`
   　👉 把年齡「18」存進一個叫做 `age` 的變數裡。

3. `print(f"hello, my name is {name}, I am {age} years old")`
   　👉 用 `f` 開頭的字串，再用大括號 `{}` 把變數放進去！

#### 🪄 執行後會顯示：

```
hello, my name is 小明, I am 18 years old
```

---

### 💡為什麼要用 f-string？

因為它可以把你變數裡的資料「自動放進句子裡」！

就像在玩填空題一樣！

例子：

```python
score = 95
print(f"我這次考了 {score} 分，好開心！")
```

結果就會顯示：

```
我這次考了 95 分，好開心！
```

---

### 🧪 你也可以自己試試：

```python
fruit = "蘋果"
price = 10
print(f"我買了一顆 {fruit}，花了 {price} 元。")
```

結果會是：

```
我買了一顆 蘋果，花了 10 元。
```

---

### 🎉 小小總結：

| 重點       | 說明                                    |
| -------- | ------------------------------------- |
| f-string | 是一種放變數進字串的方法                          |
| 怎麼用？     | 在 `print()` 裡的字串前面加上 `f`，再用 `{}` 包住變數 |
| 優點       | 讓句子裡的變數自動變成文字，寫起來簡單又清楚                |

---

如果你還想學更多像這樣好玩的 Python 小技巧，隨時告訴我唷！👏😄

---

## 🧮 一、比較運算子（比一比）

| 程式碼  | 讀法   | 意思           |
| ---- | ---- | ------------ |
| `==` | 等於   | 看兩邊是不是一樣     |
| `!=` | 不等於  | 看兩邊是不是不一樣    |
| `>`  | 大於   | 左邊有沒有比右邊大    |
| `<`  | 小於   | 左邊有沒有比右邊小    |
| `>=` | 大於等於 | 左邊有沒有比右邊大或一樣 |
| `<=` | 小於等於 | 左邊有沒有比右邊小或一樣 |

### ✅ 例子：

```python
print(1 == 1)  # True，1跟1一樣
print(1 != 1)  # False，1和1沒不一樣
print(2 > 1)   # True，2比1大
print(1 < 1)   # False，一樣大不算小
```

---

## 🤔 二、邏輯運算子（判斷多個條件）

| 運算子   | 讀法    | 解釋                          |
| ----- | ----- | --------------------------- |
| `and` | 而且都要對 | 兩個都要是 True，才會是 True         |
| `or`  | 有一個就好 | 只要有一個 True，就是 True          |
| `not` | 相反的意思 | 把 True 變 False，False 變 True |

### ✅ and 的例子：

```python
print(True and True)    # True（兩個都對）
print(True and False)   # False（有一個錯）
```

### ✅ or 的例子：

```python
print(True or False)    # True（只要有一個對）
print(False or False)   # False（兩個都錯）
```

### ✅ not 的例子：

```python
print(not True)   # False（原本是對的，變錯）
print(not False)  # True（原本是錯的，變對）
```

---

## 🥇 三、運算的優先順序（誰先算？）

先算誰？就看下面這個順序表！

1. `()` 括號
2. `**` 次方
3. `* / // %` 乘除取餘數
4. `+ -` 加減
5. `== != > < >= <=` 比大小
6. `not` 相反
7. `and` 而且都要對
8. `or` 有一個就好

---

## 🔐 四、密碼門檢查（if 判斷）

你做了一個「輸入密碼才能進門」的小程式，太厲害啦！

### ✅ 程式範例：

```python
password = input("請輸入密碼: ")

if password == "1234":
    print("歡迎Jeffrey！")
elif password == "5678":
    print("歡迎Tim！")
elif password == "0000":
    print("歡迎Chloe！")
else:
    print("密碼錯誤！")
```

### 🧠 小知識：什麼是 if / elif / else？

| 關鍵字    | 用法說明             |
| ------ | ---------------- |
| `if`   | 如果（第一個條件）        |
| `elif` | 否則如果（第二、第三...條件） |
| `else` | 全部都不符合的話         |

### ❗ 多個 if 跟 elif 差在哪？

* `if、elif、else`：只會選 **一個符合的** 執行。
* 多個 `if`：**全部都會檢查**，就算前面已經符合也繼續跑後面，比較沒效率。

---

## ✅ 小總結：今天又學會了！

* ✔ 怎麼用比較運算子比數字（==、!=、>、<...）
* ✔ 怎麼用邏輯運算子判斷多個條件（and、or、not）
* ✔ 了解程式的運算順序
* ✔ 寫出可以判斷密碼的小系統
* ✔ 知道 if、elif、else 的不同用途

---

如果你想要我幫你把這些變成「小抄」、「筆記圖卡」或「PDF檔」，隨時可以跟我說！我也可以幫你出幾題練習喔 😄
    """
    )
